{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to KRSRI Barelang F1","text":"ROBOT HEXAPOD BARELANG F1"},{"location":"#apa-itu-krsri-barelang-f1","title":"Apa itu KRSRI Barelang F1?","text":"<p>KRSRI Barelang F1 adalah robot Hexapod atau robot berkaki enam dengan bentuk yang menyerupai laba-laba, namun robot Hexapod hanya memiliki 6 kaki daripada 8 kaki.</p> <p>Robot Hexapod F1 nantinya akan di ikut sertakan dalam perlombaan Kontes Robotik Indonesia (KRI) dimana robot ini akan dilengkapi dengan gripper yang akan membantu robot mengangkut objek yang nantinya harus diangkut ke zona yang ditandai agar mendapatkan poin dan memenangkan perlombaan.</p> <p>Untuk dokumentasi penuh silahkan kunjungi barelang.org.</p>"},{"location":"#our-team","title":"Our Team","text":"BARELANG F1 2024-2025 TEAM"},{"location":"2-setup/","title":"Setup Utama","text":""},{"location":"2-setup/#jetson-nano","title":"Jetson Nano","text":"<p>Robot Hexapod Barelang F1 menggunakan Mini PC Jetson Nano sebagai central processing unit yang akan memproses bermacam banyaknya data secara real-time. Jetson Nano juga akan berperan penting dalam peran Computer Vision dan Motion Controll dimana semua sensor dan sistem pergerakan robot akan bergantung kepada kecepatan prosesi Jetson Nano yang kencang. </p>"},{"location":"2-setup/#instalasi-nvidia-jetson","title":"Instalasi NVidia Jetson","text":"<p>Untuk melakukan instalasi software Jeson Nano dapat dilihat pada Official NVidia Jetson Nano Installation Guide dibawah ini:  Visit the official page </p> <p>Setelah melakukan proses instalasi dari link idatas, masukkan command berikut ini untuk melakukan update system <pre><code>sudo apt update\n</code></pre> dan  <pre><code>sudo apt upgrade\n</code></pre></p> <p>Dua command diatas tadi berfungsi untuk memperbarui local package index dan memastikan sistem memiliki informasi terbaru tentang semua package yang ada dan versinya.</p>"},{"location":"2-setup/#jetson-nano-ubuntu-dummy-video","title":"Jetson Nano Ubuntu Dummy Video","text":"<p>Penginstalan Dummy video Driver ini diperlukan agar Jetson dapat menampilkan gambar pada device yang akan digunakan. Untuk monitor dengan resolusi layar tetap menggunakan VNC atau Nomachine, run perintah berikut ini di terminal satu per satu. <pre><code>sudo apt-get install xserver-xorg-core\n</code></pre> <pre><code>sudo apt-get install xserver-xorg-video-dummy\n</code></pre> <pre><code>sudo apt-get install --reinstall xserver-xorg-input-all\n</code></pre> <pre><code>sudo nano /usr/share/X11/xorg.conf.d/xorg.conf\n</code></pre> dan lakukan penginstalan dengan memasukkan perintah ini: <pre><code>sudo apt install nano\n</code></pre></p> <p> Setelah itu, paste perintah berikut ini:</p> <p><pre><code>Section \"Module\"\n\n    Disable     \"dri\"\n        SubSection  \"extmod\"\n            Option  \"omit xfree86-dga\"\n        EndSubSection\n    EndSection\n\n    Section \"Device\"\n        Identifier  \"Tegra0\"\n        Driver      \"nvidia\"\n        Option      \"AllowEmptyInitialConfiguration\" \"true\"\n    EndSection\n\n    Section \"Monitor\"\n       Identifier \"DSI-0\"\n       Option    \"Ignore\"\n    EndSection\n\n    Section \"Screen\"\n       Identifier    \"Default Screen\"\n       Monitor        \"Configured Monitor\"\n       Device        \"Default Device\"\n       SubSection \"Display\"\n           Depth    24\n           Virtual 1280 720\n       EndSubSection\n    EndSection\n</code></pre> Setelah memasukkan semua perintah diatas, langkah berikutnya adalah keluar dari program dan menyimpannya dengan cara <code>ctrl + X</code> dan memilih opsi Yes <code>Y</code> kitka muncul permintaan untuk menyimpan program.</p> <p></p>"},{"location":"2-setup/#vsc-jetson","title":"VSC Jetson","text":"<p>Untuk melakukan instalasi Visual Studio Code ke dalam Jetson Nano dapat dilakukan dengan mendownload VSC tertentu melalui tombol dibawah ini: </p> <p>Direct Download VSC for Jetson  </p> <p>Setelah itu memasukkan perintah ini untuk melakukan penginstalan:  <pre><code>cd Downloads \n</code></pre> <pre><code>sudo dpkg -i [nama file VS code yang didownload]\n</code></pre></p> <p></p>"},{"location":"2-setup/#penginstalan-nomachine","title":"Penginstalan Nomachine","text":"<p>Nomachine adalah program desktop jarak jauh yang bisa digunakan dengan NVidia Jetson untuk banyak macam hal, diantaranya: </p> <ul> <li>Mengakses file, audio dan video.</li> <li>Merekam dan menyiarkan layar.</li> <li>Memindahkan dan mentransfer file.</li> </ul> <p>Nomachine menjadi pilihan utama karena lebih ringan dan lebih cepat ketimbang VNC. Penginstalan NoMachine kedalam NVidia Jetson Nano dapat dilakukan dengan mendownload NoMachine .deb package untuk ARmv8 melalui Official Website atau mendownloadnya langsung menggunakan command wget sebagai berikut:  <pre><code>cd Downloads \n</code></pre> <pre><code>wget https://www.nomachine.com/free/arm/v8/deb -O nomachine.deb\n</code></pre> Lalu melakukan penginstalan dengan command ini: <pre><code>sudo dpkg -i nomachine.deb\n</code></pre></p> <p> Setelah melakukan semua step diatas, masukkan program berikut untuk reboot system: <pre><code>sudo reboot\n</code></pre></p> <p></p>"},{"location":"2-setup/#setting-ip-statis-untuk-lan-nomachine","title":"Setting IP Statis untuk LAN Nomachine","text":"<p>IP statis sangat berguna jika suatu webiste atau device external perlu mengingat IP penggunanya, IP statis adalah titik akses tetap sehingga IP yang diakses tidak akan berubah-ubah. Hal ini dapat membuat komunikasi antar device semakin mudah dan konsisten.  Seperti pada namanya, disini kita akan menggunakan LAN/kabel Ethernet.</p> <p>JetsonNano memiliki sebuah slot untuk kabel LAN/Ethernet, port ini dapat digunakan untuk menghubungkan JetsonNano dengan PC anda menggunakan kabel LAN/Ethernet.</p>"},{"location":"2-setup/#konfigurasi-ip-statis","title":"Konfigurasi IP Statis","text":"<p>Tanpa Internet, anda perlu mengatur IP statis pada kedua perangkat yatu pada JetsonNano dan pada PC anda </p>"},{"location":"2-setup/#pada-jetson-nano","title":"Pada Jetson Nano","text":"<ul> <li> <p>Edit file konfigurasi jaringan: <pre><code>sudo nano /etc/network/interfaces\n</code></pre></p> </li> <li> <p>Lalu tambahkan konfigurasi berikut: <pre><code>auto eth0\niface eth0 inet static\naddress 192.168.1.2\nnetmask 255.255.255.0\n</code></pre></p> </li> <li> <p>Simpan dan restart jaringan dengan memasukkan perintah ini: <pre><code>sudo systemctl restart networking\n</code></pre></p> </li> </ul>"},{"location":"2-setup/#pada-pc-user","title":"Pada PC User","text":"<ul> <li>Atur IP Statis di pengaturan jaringan:</li> </ul> <p>Windows</p> <ul> <li>Buka Control Panel &gt; Network and Sharing Center &gt; Change adapter settings</li> <li>Klik kanan pada koneksi Ethernet &gt; Properties</li> <li>Pilih Internet Protocol Version 4 (TCP/IPv4) dan klik \"Properties\"</li> <li>Masukkan:       - IP Adress: <code>192.168.1.1</code>  - Subnet Mask: <code>255.255.255.0</code></li> <li>Klik OK</li> </ul> <p>Ubuntu</p> <p>OOPS we haven't gotten that far yet, we'll make an update as soon as we do! </p> <p></p>"},{"location":"2-setup/#verifikasi-koneksi","title":"Verifikasi Koneksi","text":"<p>Untuk mengverifikasi jika kedua perangkat (Jetson Nano dengan PC pengguna)sudah tersambung dengan benar, kita dapat membuat kedua device saling ping untuk memastikan keduanya tersambung.</p> <ul> <li> <p>Dari PC ke Jetson Nano: <pre><code>ping 192.168.1.2\n</code></pre></p> </li> <li> <p>Dari Jetson Nano ke PC: <pre><code>ping 192.168.1.1\n</code></pre></p> </li> </ul>"},{"location":"2-setup/#menggunakan-nomachine","title":"Menggunakan NoMachine","text":"<p>Agar dapat menggunakan NoMachine, kita harus menjalankan NoMachine server pada Jetson Nano terlebih dahulu (biasanya server berjalan otomatis setelah instalasi). </p> <p>Lalu pada PC ada beberapa langkah yang harus dilakukan:</p> <ul> <li> <p>Buka NoMachine client dan tambahkan koneksi baru:      - Pilih manual connection.     - Masukkan alamat IP Jetson Nano (<code>192.168.1.2</code>).     - Pilih protokol (Default adalah NX).</p> </li> <li> <p>Klik Connect.</p> </li> <li>Masukkan username dan password Jetson Nano untuk login.</li> </ul> <p></p>"},{"location":"2-setup/#instalasi-ros-bridge","title":"Instalasi ROS Bridge","text":"<p>ROS Bridge adalah suatu framework atau Tool yang memungkinkan komunikasi antara Robot Operating System dengan sistem external seperti penggunaan website, aplikasi mobile, atau bahasa pemrograman lainnya sembari menyediakan interface untuk semua sistem non-ROS agar sistem-sistem tersebut dapat bekerja dengan ROS dengan cara bertukar pesan dan protokol seperti WebSocket, JSON, atau API Lainnya.</p> <ul> <li>Install ROS Bridge di Jetson Nano Jalankan perintah berikut di Jetson Nano: <pre><code>sudo apt-get install ros-melodic-rosbridge-server\n</code></pre></li> </ul> <p>Note</p> <p>Ganti melodic dengan versi ROS Anda jika berbeda</p> <ul> <li>Jalankan ROS Bridge <pre><code>roslaunch \nrosbridge_server \nrosbridge_websocket.launch\n</code></pre></li> </ul> <p>Secara default, server WebSocket berjalan di port 9090.</p> <ul> <li>Test ROS Bridge Gunakan WebSocket client seperti ROS Web Tools atau RQT untuk memeriksa data</li> </ul> <p></p>"},{"location":"2-setup/#ubah-nama-host-jetson","title":"Ubah Nama Host Jetson","text":"<p>Menggunakan nama Host atau mDNS (Bonjour/Avahi)  Jika Anda sering berpindah jaringan dan tidak ingin repot mengatur IP statis, anda dapat gunakan nama host atau teknologi mDNS untuk menggantikan IP Address. Langkah-langkahnya adalah sebagai berikut:</p> <p>Instalasi mDNS (Avahi) di Jetson:</p> <ul> <li> <p>Pastikan Avahi terinstall di Jetson Nano dengan menjalankan perintah berikut ini: <pre><code>sudo apt update\nsudo apt install avahi-daemon libnss-mdns\n</code></pre></p> </li> <li> <p>o Setelah terinstal, Jetson akan dapat diakses menggunakan hostname.local. Misalnya, jika nama host Jetson Anda adalah bf1, maka Anda dapat mengaksesnya dengan: <pre><code>ws://bf1.local:9090\n</code></pre></p> </li> </ul>"},{"location":"2-setup/#install-gstreamer","title":"Install GStreamer","text":"<p>GStreamer adalah framework multimedia yang sangat fleksibel dan kuat yang dapat digunakan untuk streaming video, termasuk dari kamera USB atau kamera lain yang terhubung ke Jetson. GStreamer dapat digunakan untuk membuat stream MJPEG, RTSP, atau bahkan HLS (HTTP Live Streaming). Berikut adalah langkah-langkah menggunakan GStreamer:</p> <ul> <li> <p>Instalasi GStreamer di Jetson  Jika GStreamer belum terinstal di Jetson Anda, Anda dapat menginstalnya dengan perintah berikut: <pre><code>sudo apt-get update\nsudo apt-get install gstreamer1.0-tools\n</code></pre></p> </li> <li> <p>Menyiapkan GStreamer untuk Streaming  Anda dapat menggunakan GStreamer untuk mengalirkan video dari kamera ke aplikasi lain, termasuk aplikasi Flutter. Misalnya, Anda dapat menyiapkan stream video menggunakan GStreamer dengan perintah berikut: <pre><code>gst-launch-1.0 v4l2src device=/dev/video0 ! videoconvert ! x264enc ! flvmux ! rtmpsink location='rtmp://your-server-address/stream'\n</code></pre> Perintah di atas mengalirkan video ke server RTMP. Anda bisa mengganti rtmp://your-server-address/stream dengan alamat server atau endpoint sesuai dengan kebutuhan Anda. Anda juga bisa memilih untuk mengalirkan stream dalam format lain (misalnya, HLS atau MJPEG).</p> </li> <li> <p>Menggunakan GStreamer dengan RTSP  Jika Anda ingin menggunakan RTSP (Real-Time Streaming Protocol) untuk streaming, Anda dapat mengonfigurasi GStreamer untuk menyediakan stream RTSP. Berikut adalah perintah untuk memulai server RTSP dengan GStreamer: <pre><code>gst-launch-1.0 v4l2src device=/dev/video0 ! videoconvert ! x264enc ! rtph264pay ! udpsink host=127.0.0.1 port=5004\n</code></pre> Anda dapat mengakses stream ini di aplikasi lain menggunakan protokol RTSP</p> </li> </ul>"},{"location":"2-setup/#memastikan-server-rtmp-dijalankan-dengan-benar","title":"Memastikan Server RTMP Dijalankan dengan Benar","text":"<p>Setelah itu, kita harus memastikan bahwa server RTMP di <code>bf1.local</code> benar-benar berjalan dan mendengarkan pada port yang sesuai. Jika Anda menggunakan NGINX dengan modul RTMP, pastikan bahwa NGINX telah dikonfigurasi untuk menerima stream RTMP pada URL <code>rtmp://bf1.local/stream</code>.</p> <p>Jika Anda belum menyiapkan server RTMP, berikut adalah langkah-langkah singkat untuk menyiapkannya menggunakan NGINX dengan modul RTMP:</p> <ul> <li>Instalasi NGINX dengan Modul RTMP: <pre><code>sudo apt-get update\nsudo apt-get install libnginx-mod-rtmp nginx\n</code></pre></li> <li> <p>Konfigurasi NGINX untuk RTMP: Edit file konfigurasi NGINX <code>(/etc/nginx/nginx.conf)</code> dan tambahkan blok konfigurasi berikut di bawah bagian: <pre><code>rtmp {\n    server {\n        listen 1935;  # Port RTMP default\n        chunk_size 4096;\n\n        application stream {\n            live on;\n            record off;\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Mulai ulang NGINX untuk memuat konfigurasi baru dengan memasukkan perintah dibawah ini: <pre><code>sudo systemctl restart nginx\n</code></pre></p> </li> <li> <p>Lalu Verifikasi NGINX sedang berjalan dan mendengarkan pada port 1935 dengan memasukkan perintah ini: <pre><code>sudo netstat -tulnp | grep 1935\n</code></pre></p> </li> </ul> <p>Jika server RTMP berjalan dengan benar, Anda harus bisa mengalirkan video menggunakan GStreamer ke <code>rtmp://bf1.local/stream.</code></p>"},{"location":"2-setup/#periksa-koneksi-ke-bf1local","title":"Periksa Koneksi ke <code>bf1.local</code>","text":"<p>Pastikan bahwa nama host <code>bf1.local</code> dapat diresolusikan dan terhubung dengan benar. Anda bisa mencoba menggunakan alamat IP langsung dari Jetson alih-alih nama host, untuk menghindari masalah dengan resolusi DNS atau bonjour/avahi.  Cobalah untuk mengganti <code>bf1.local</code> dengan alamat IP Jetson: <pre><code>gst-launch-1.0 v4l2src device=/dev/video0 ! videoconvert ! x264enc ! flvmux ! rtmpsink location='rtmp://&lt;Jetson-IP&gt;/stream'\n</code></pre></p> <p>Pastikan Anda mengganti <code>&lt;Jetson-IP&gt;</code> dengan alamat IP lokal Jetson Anda.</p>"},{"location":"2-setup/#streaming-dengan-gstreamer-dari-jetson-ke-server-rtmp","title":"Streaming dengan GStreamer dari Jetson ke Server RTMP","text":"<p>Sekarang Anda bisa menggunakan GStreamer di Jetson untuk mengirim stream video ke server RTMP yang sudah disiapkan.  Jika Anda menggunakan nama host <code>bf1.local</code>, Anda bisa mengonfigurasi GStreamer seperti ini: <pre><code>gst-launch-1.0 v4l2src device=/dev/video0 ! videoconvert ! x264enc ! flvmux ! rtmpsink location='rtmp://bf1.local/stream'\n</code></pre></p> <p>Jika Anda lebih memilih menggunakan IP Jetson secara langsung, ganti <code>bf1.local</code> dengan alamat IP lokal Jetson Anda: <pre><code>gst-launch-1.0 v4l2src device=/dev/video0 ! videoconvert ! x264enc ! flvmux ! rtmpsink location='rtmp://&lt;Jetson-IP&gt;/stream'\n</code></pre></p> <p>Dengan GStreamer yang dikonfigurasi ini, video dari kamera yang terhubung ke Jetson akan disalurkan ke server RTMP yang ada di jaringan lokal Anda.</p>"},{"location":"2-setup/#akses-stream-dari-perangkat-lain","title":"Akses Stream dari Perangkat Lain","text":"<p>Sekarang Anda dapat mengakses stream RTMP dari perangkat lain di jaringan lokal.</p> <ul> <li> <p>Menggunakan VLC: Anda dapat membuka stream RTMP menggunakan VLC media player dengan URL: <pre><code>rtmp://bf1.local/stream\n</code></pre></p> </li> <li> <p>Menggunakan Browser atau Aplikasi Lain: Anda juga bisa mengakses stream dengan aplikasi yang mendukung RTMP, seperti aplikasi pemutar video atau aplikasi streaming lainnya.</p> </li> </ul> <p>Jika Anda sudah menjalankan perintah GStreamer seperti berikut: <pre><code>gst-launch-1.0 v4l2src device=/dev/video0 ! videoconvert ! x264enc ! flvmux ! rtmpsink location='rtmp://bf1.local/stream'\n</code></pre></p> <p>Namun Anda tidak melihat output atau log yang menunjukkan adanya masalah atau stream yang berjalan, ada beberapa cara untuk memeriksa apakah streaming Anda sudah berjalan dengan benar seperti berikut:</p>"},{"location":"2-setup/#periksa-status-rtmp-server-nginx","title":"Periksa Status RTMP Server (NGINX)","text":"<p>Anda perlu memastikan server RTMP yang Anda gunakan (misalnya, NGINX dengan modul RTMP) sudah berjalan dengan benar dan mendengarkan di port 1935.</p> <ul> <li> <p>Cek status NGINX: <pre><code>sudo systemctl status nginx\n</code></pre></p> </li> <li> <p>Pastikan server RTMP mendengarkan pada port 1935. Anda dapat memeriksa dengan perintah: <pre><code>sudo netstat -tuln | grep 1935\n</code></pre></p> </li> </ul> <p>Ini akan menunjukkan apakah port 1935 terbuka dan sedang digunakan oleh server RTMP.</p>"},{"location":"2-setup/#cek-url-stream-di-vlc-atau-aplikasi-lain","title":"Cek URL Stream di VLC atau Aplikasi Lain","text":"<p>Setelah stream dikirim ke `rtmp://bf1.local/stream, Anda bisa memeriksa apakah stream tersebut dapat diakses dengan aplikasi seperti VLC.</p> <ul> <li>Buka VLC dan pilih \"Media\" &gt; \"Open Network Stream\" dan masukkan URL RTMP: <pre><code>rtmp://bf1.local/stream\n</code></pre></li> </ul> <p>Jika stream berhasil, VLC akan mulai menampilkan video yang dipancarkan dari Jetson.</p>"},{"location":"3-instalasiSoftware/","title":"Instalasi Software Robot Hexapod","text":""},{"location":"3-instalasiSoftware/#penginstalan-software-motion","title":"Penginstalan Software Motion","text":""},{"location":"3-instalasiSoftware/#penginstalan-dynamixel-sdk","title":"Penginstalan Dynamixel SDK","text":"<p>Dynamixel SDK adalah software pengembangan yang menyediakan fungsi kendali menggunakan packet communication. API dari Dynamixel DK itu sendiri di desain untuk aktuator Dynamixel dan semua platform berbasis Dynamixel. Untuk penggunaan software ini diperlukan pemahaman dasar tentang bahasa pemrograman C/C++.</p> <p>Untuk memulai langkah penginstalan dapat dilakukan dengan cara memasukkan perintah berikut kedalam terminal program: Perintah Penginstalan Dynamixel SDK<pre><code>$ git clone https://github.com/ROBOTIS-GIT/DynamixelSDK.git\n</code></pre> Atau dapat dilakukan juga dengan langsung menekan tombol link yang tertera pada bagian Download-Repository di website Dynamixel SDK dan Setelah itu kita akan memasuki tahap Library Setup. </p>"},{"location":"3-instalasiSoftware/#cpp-linux-library-setup-compiler-and-builder","title":"CPP Linux Library Setup (Compiler and Builder)","text":""},{"location":"3-instalasiSoftware/#1compiler","title":"1.Compiler","text":"<ul> <li>GNU gcc versi 5.4.0 20160609 atau lebih tinggi</li> <li>Untuk memeriksa versi compiler gcc, dapat dilakukan menggunakan perintah ini: <pre><code>$ gcc -v \n</code></pre></li> <li>Download compiler yang dibutuhkan dengan perintah ini: <pre><code>$ sudo apt-get install gcc-5\n</code></pre> </li> </ul>"},{"location":"3-instalasiSoftware/#2builder","title":"2.Builder","text":"<ul> <li>Dapatkan pkg yang diperlukan untuk Build menggunakan \u2192 make. Perintah yang dijalankan adalah: <pre><code>$ sudo apt-get install build-essential\n</code></pre> </li> </ul>"},{"location":"3-instalasiSoftware/#3membuat-library","title":"3.Membuat Library","text":"<ul> <li>Memilih format (64bit atau 32bit) yang ingin digunakan untuk membuat library. Library ini sendiri dapat dibuat menggunakan platform x32bit, x64bit atau SBC. Disini kami menggunakan SBC sehingga Lokasi direktori Makefile dapat ditemukan melalui address berikut:   <code>[DynamixelSDK folder]/cpp/build/linux_sbc</code>  Sumber contoh yang akan dibuat adalah dalam bentuk 32bit, oleh karena itu library 32bit sebaiknya dibangun.</li> </ul> <ul> <li>lalu pergi ke direktori Makefile SBC yang seharusnya terletak di:  <code>[DynamixelSDK folder]/cpp/build/linux_sbc</code>  menggunakan perintah: <pre><code>$ make\n</code></pre></li> </ul> <ul> <li>Untuk memasukkan Library ke Root Directory (Untuk menghandle serial port) menggunakan perintah: <pre><code>$ sudo make install\n</code></pre></li> </ul>"},{"location":"3-instalasiSoftware/#penjalanan-sample-code","title":"Penjalanan sample code","text":"<p>Sample code Dynamixel SDK untuk pengguna CPP menggunakan library files (atau .so untuk Linux), Oleh karena ini sebaiknya library file dibuat didalam path seperti ini:  <code>[DynamixelSDK folder]/c++/build/[linuxXX]/libdxl_xYY_cpp.so</code>  dengan source code nya sendiri seperti yang dapat dilihat diatas.</p> <ul> <li>Memilih format (32bit atau 64bit) yang ingin digunakan untuk pembuatan library. File MakeFile untuk Building Source berada didalam direktori seperti dibawah ini: <code>[DynamixelSDK folder]/c++/example/protocol1.0/read_write/linux32</code> atau <code>[DynamixelSDK folder]/c++/example/protocol1.0/read_write/linux64</code></li> </ul> <p>Note</p> <p>Jika ingin membuat build example source dalam format 32bit maka library ini juga harus dibuat dalam format yang sama </p> <p></p> <ul> <li>Lalu pada terminal, pergi ke folder MakeFile: <code>/c++/example/protocol1.0/read_write/linux32</code> sebagai contoh, membuat file executable menggunakan command ini: <pre><code>$ make\n</code></pre></li> </ul> <p></p> <ul> <li>Jika terdeteksi suatu error maka dapat menggunakan command  <code>make clean</code> dan mamsukkan lagi commmand <code>make</code> untuk mengulangi proses pembuatan dan mencoba menghilangkan error.</li> </ul> <p></p> <ul> <li>Setelah itu masukkan command ini agar port dapat digunakan: <pre><code>$ sudo chmod a+rw /dev/ttyUSB0\n</code></pre></li> </ul> <p></p> <ul> <li>Setelah semuanya berfungsi dengan baik, kita akhirnya dapat menjalankan source code menggunakan command ini: <pre><code>$ ./read_write\n</code></pre></li> </ul> <p></p> <p>Untuk lebih lengkapnya mengenai proses instalasi software Dynamixel SDk dapat pada web page official Dynamixel dibawah ini. </p> <p>Dynamixel Library Setup</p> <p></p>"},{"location":"3-instalasiSoftware/#penginstalan-software-vision","title":"Penginstalan Software Vision","text":""},{"location":"3-instalasiSoftware/#menginstall-jetson-inference","title":"Menginstall Jetson Inference","text":""},{"location":"3-instalasiSoftware/#memperbarui-ubuntu-dan-git-cmake","title":"Memperbarui Ubuntu dan Git Cmake","text":"<p>Hal pertama yang harus dilakukan adalah update ubuntu dengan source code berikut:  <pre><code>$ sudo apt-get update\n</code></pre> Setelah itu install git cmake dengan source code berikut: <pre><code>$ sudo apt-get install git cmake\n</code></pre></p>"},{"location":"3-instalasiSoftware/#menduplicate-library-jetson","title":"Menduplicate Library Jetson","text":"<p>Lalu duplikat library jetson inference dengan source code berikut:  <pre><code>$ git clone https://github.com/dusty-nv/jetson-inference\n</code></pre> Setelah di duplikat masuk kedalam jetson inference dengan source code berikut: <pre><code>$ cd jetson-inference\n$ git submodule update --init\n</code></pre></p>"},{"location":"3-instalasiSoftware/#menginstall-libpython3","title":"Menginstall libpython3","text":"<p>Lalu install libpython3 dengan source code berikut:  <pre><code>$ sudo apt-get install libpython3-dev python3-numpy\n</code></pre> Setelah itu masuk kedalam jetson inference dengan source code berikut:  <pre><code>$ cd jetson-inference\n</code></pre> Buatlah sebuah folder dengan nama build dengan source code berikut:  <pre><code>$ mkdir build\n</code></pre> Setelah buat folder lalu masuk kedalam folder build dengan source code berikut:  <pre><code>$ cd build\n</code></pre> Gunakan source code berikut untuk membuat Library:  <pre><code>$ cmake ../\n</code></pre> Lalu buka build yang ada pada folder jetson inference dengan source code berikut:  <pre><code>$ cd jetson-inference/build\n</code></pre> Setelah itu compiling library dengan source code berikut:  <pre><code>$ make\n</code></pre> Lalu install library dengan source code berikut:  <pre><code>$ sudo make install\n</code></pre> Lalu langkah terakhir penginstalan library adalah mengetik source berikut untuk menyelesaikan instalasi  <pre><code>$ sudo ldconfig\n</code></pre></p>"},{"location":"4-instalasiVision/","title":"Object Detection","text":"<p>Agar robot Hexapod dapat mengenali berbagai macam objek yang ada maka robot harus mampu mengidentifikasi objek dengan mengandalkan kemampuan visualnya dan oleh karena itu kami menggunakan Roboflow agar robot hexapod dapat mendeteksi objek-objek yang nantinya akan muncul pada arena perlombaan.</p> <p>Kita dapat menggunakan google colab untuk melakukan training. Sebelum melakukan training kita harus melabel terlebih dahulu. Membuat label dapat menggunakan labelimg dan roboflow. Disini kami menggunakan roboflow untuk membuat label pada gambar kami. Berikut adalah langkah \u2013 langkah membuat label diroboflow yaitu sebagai berikut :</p>"},{"location":"4-instalasiVision/#roboflow","title":"Roboflow","text":"<p>Bukalah website Roboflow dan masukan akun jika belum terdaftar. Setelah memasukkan akun, klik \u201cNew Project\u201d pada pojok kanan layar.</p> <p></p> <p> Buatlah nama Project sesuai dengan keinginan, untuk annotating grup buatlah sesuai dengan label yang diinginkan contohnya korban/dummy. Sedangkan untuk bagian license tetap sama dan tidak ada perubahan.</p> <p></p> <p> Pilih \"Object Detection\" sebagai tipe project yang akan dikerjakan.</p> <p></p> <p> Setelah itu, klik create public project. Akan muncul tampilan seperti berikut</p> <p></p> <p> Upload data dapat berupa video, foto ataupun pdf. Lalu annotate untuk melabel data setelah data siap di load. Berikut tampilan annotate, kita dapat menggunakan bounding box tool atau pun polygon tool untuk melabel gambar.</p> <p></p> <p> Setelah semua selesai dilabel, klik keluar lalu klik add dataset. Setelah itu klik version dan download dataset Akan keluar lalu pilih format, jika menggunakan ssd mobilenet maka format yang harus dipilih adalah pascal VOC.</p> <p></p> <p>Cara penggunaan roboflow telah selesai akan dilanjutkan pada proses untuk melakukan training dengan langkah \u2013 langkah sebagai berikut</p> <ul> <li>extrac file dataset yang telah kita download dari roboflow</li> <li>pastikan dataset tersebut ada didalam jendela linux kita</li> <li>buat lah dua folder didalam home dengan nama pic dan anno</li> <li>file yang sudah kita extrac tadi pisahkan antara label dan foto.</li> <li>pindahkan foto kedalam folder pic dan label ke dalam folder anno yang telah kita buat.</li> <li>buka terminal lalu masukkan commad \u201ctouch collab.py\u201d</li> <li>lalu klik diterminal \u201ccode .\u201d</li> <li>masukan program berikut</li> </ul> <pre><code>import os\nimport shutil\nimport random\n\ndef create_directory_structure(model_name):\n\"\"\"Membuat struktur direktori yang sesuai.\"\"\"\nos.makedirs(f\"data/{model_name}/JPEGImages\", exist_ok=True)\nos.makedirs(f\"data/{model_name}/Annotations\", exist_ok=True)\nos.makedirs(f\"data/{model_name}/ImageSets/Main\", exist_ok=True)\n\n def move_files(src_img_dir, src_ann_dir, dst_img_dir, dst_ann_dir):\n\"\"\"Memindahkan gambar dan anotasi ke direktori tujuan.\"\"\"\nimg_files = os.listdir(src_img_dir)\nfor img_file in img_files:\n    shutil.copy(os.path.join(src_img_dir, img_file), os.path.join(dst_img_dir, img_file))\n\nann_files = os.listdir(src_ann_dir)\nfor ann_file in ann_files:\n    shutil.copy(os.path.join(src_ann_dir, ann_file), os.path.join(dst_ann_dir, ann_file))\n\ndef write_split_file(file_list, output_file):\n\"\"\"Menulis file split (train.txt, test.txt, val.txt).\"\"\"\nwith open(output_file, 'w') as f:\n    for file in file_list:\n        file_name = os.path.splitext(file)[0]  # Remove extension\n        f.write(f\"{file_name}\\n\")\n\ndef split_dataset(img_files, train_ratio=0.8, val_ratio=0.1):\n\"\"\"Membagi dataset menjadi train, val, dan test.\"\"\"\nrandom.shuffle(img_files)  # Acak gambar\n\ntotal_files = len(img_files)\ntrain_end = int(total_files * train_ratio)\nval_end = train_end + int(total_files * val_ratio)\n\ntrain_files = img_files[:train_end]\nval_files = img_files[train_end:val_end]\ntest_files = img_files[val_end:]\n\nreturn train_files, val_files, test_files\n\ndef main():\n# Nama model\nmodel_name = input(\"Please enter model name: \")\n\n# Buat struktur direktori yang sesuai\ncreate_directory_structure(model_name)\n\n# Direktori sumber gambar dan anotasi\n# Ubah direktori sesuai dengan lokasi folder Anda di Linux\nsrc_img_dir = \"/home/username/Downloads/krsri_new.v1i.voc/pic\"  # Sesuaikan dengan path di Linux\nsrc_ann_dir = \"/home/username/Downloads/krsri_new.v1i.voc/annot\"  # Sesuaikan dengan path di Linux\n\n# Direktori tujuan\njpeg_images_dir = f\"data/{model_name}/JPEGImages\"\nannotations_dir = f\"data/{model_name}/Annotations\"\n\n# Pindahkan gambar dan anotasi ke struktur direktori yang sesuai\nmove_files(src_img_dir, src_ann_dir, jpeg_images_dir, annotations_dir)\n\n# Dapatkan semua file gambar\nimg_files = os.listdir(src_img_dir)\n\n# Pisahkan dataset menjadi train, val, dan test\ntrain_files, val_files, test_files = split_dataset(img_files)\n\n# Tulis file split (train.txt, val.txt, test.txt, trainval.txt)\nwrite_split_file(train_files, f\"data/{model_name}/ImageSets/Main/train.txt\")\nwrite_split_file(val_files, f\"data/{model_name}/ImageSets/Main/val.txt\")\nwrite_split_file(test_files, f\"data/{model_name}/ImageSets/Main/test.txt\")\nwrite_split_file(train_files + val_files, f\"data/{model_name}/ImageSets/Main/trainval.txt\")\n\nprint(f\"Dataset {model_name} has been organized successfully.\")\n\nif __name__ == \"__main__\":\nmain()\n</code></pre> <ul> <li> <p>Jalankan program tersebut dengan masuk ke terminal ketik commad     <pre><code>\u201cpython3 collab.py\u201d\n</code></pre></p> </li> <li> <p>Sebelum dijalankan pastikan sudah ada folder dengan nama data di home.</p> </li> <li>Setelah selesai didalam folder data akan terdapat model dan didalam model akan terdapat annotations, imageset dan JPGEImages serta buatlah file label.txt didalam model.</li> </ul> <p> Setelah proses diatas selesai kita bisa langsung melakukan training di google colab dengan cara sebagai berikut:</p> <ul> <li>Masuk ke google collab dan masukkan akun</li> <li> <p>Instal jetson train dengan commad  <pre><code>\u201c! git clone https://github.com/mailrocketsystems/jetson-train.git\u201d didalam google collab\n</code></pre></p> </li> <li> <p>Setelah itu masukkan file data yang sudah kita dapatkan tadi ke dalam jetson train/data sesuai dengan urutan folder data.</p> </li> </ul> <p></p> <ul> <li> <p>Setelah folder diupload jalankan program dengan mengetik code  <pre><code>!python3 train_ssd.py --dataset-type=voc \u2013data=data/{Nama model}/ --model-dir=models/{Nama model} --batch-size=40 --workers=2 --epochs=100\n</code></pre></p> </li> <li> <p>Setelah dijalankan, tunggu sampai proses selesai.</p> </li> <li> <p>Setelah selesai kita harus mendapatkan hasil terbaik dari training dengan cara mengetik <pre><code>!python3 result.py\n</code></pre></p> </li> <li> <p>Setelah itu download file tersebut beserta label.txtnya.</p> </li> </ul>"}]}